

# This file was *autogenerated* from the file particle_systems.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_50 = Integer(50); _sage_const_25 = Integer(25); _sage_const_0 = Integer(0); _sage_const_p01 = RealNumber('.01'); _sage_const_p1 = RealNumber('.1'); _sage_const_p5 = RealNumber('.5'); _sage_const_0p1 = RealNumber('0.1'); _sage_const_5 = Integer(5); _sage_const_100 = Integer(100); _sage_const_57 = Integer(57); _sage_const_250 = Integer(250); _sage_const_20 = Integer(20); _sage_const_30 = Integer(30)#To Run
#sage particle_systems.sage
import random
from sage.plot.plot3d.shapes import *
from sage.plot.plot3d.shapes2 import Line
from sage.plot.plot3d.shapes2 import line3d

string_brownean = "string_brownean_field"
linear_rotation = "linear rotation"
linear_attractor = "linear attractor"
linear_rotation_with_attractor = "linear rotation with attractor"
brownean = "brownean"
browneanSpherical = "browneanSpherical"
browneanCylindrical = "browneanCylindrical"
browneanManifold = "browneanManifold"

class string(object):
    """A string"""
    def __init__(self, **kwargs):
        self.dimensions = kwargs.get("dimensions")
        self.forcefields = kwargs.get("forcefields")
        self.color = kwargs.get("color")
        self.history = []
        self.history.append(self.dimensions)
        for forcefield in self.forcefields:
            forcefield.register_string(self)

    def normalize(self):
        """normalize to some surface"""
        pass

    def move(self):
        old_dimensions = self.history[-_sage_const_1 ]
        self.history.append({"xi":self.dimensions["xi"], 
                             "yi":self.dimensions["yi"], 
                             "zi":self.dimensions["zi"]})
        update_dictionary = {}
        for xi in old_dimensions:
            update_dictionary[xi+"_old"] = old_dimensions[xi]
        self.dimensions.update(update_dictionary)
        for field in self.forcefields:
            self.dimensions.update(field.perturb_string(self.dimensions))
        self.normalize()


class particle(object):
    """a particle"""
    def __init__(self, **kwargs):
        self.dimensions = kwargs.get("dimensions")
        self.forcefields = kwargs.get("forcefields")
        self.color = kwargs.get("color")
        self.history = []
        for forcefield in self.forcefields:
            forcefield.register_particle(self)

    def spherical_normalize(self):
        x = self.dimensions["x"]
        y = self.dimensions["y"]
        z = self.dimensions["z"]
        radius = self.dimensions["r"]
        rnorm=sqrt(x**_sage_const_2 +y**_sage_const_2 +z**_sage_const_2 )/radius
        self.dimensions["x"] = x/rnorm
        self.dimensions["y"] = y/rnorm
        self.dimensions["z"] = z/rnorm

    def cylindrical_normalize(self):
        x = self.dimensions["x"]
        y = self.dimensions["y"]
        z = self.dimensions["z"]
        radius = self.dimensions["r"]
        rnorm = sqrt(x**_sage_const_2 +y**_sage_const_2 )/radius
        self.dimensions["x"] = x/rnorm
        self.dimensions["y"] = y/rnorm
        self.dimensions["z"] = z

    def manifold_normalize(self): #fixme
        x = self.dimensions["x"]
        y = self.dimensions["y"]
        z = self.dimensions["z"]
        #minimize distance to a given manifold. (Fixme)
        # https://ask.sagemath.org/question/10911/embedding-a-graphicsplot-on-a-torus/
        var('u,v')
        a,b = _sage_const_50 ,_sage_const_25 
        x_manifold = (a + b*cos(u))*cos(v)
        y_manifold = (a + b*cos(u))*sin(v)
        z_manifold = b*sin(u)
        distance = sqrt((x-x_manifold)**_sage_const_2 +(y-y_manifold)**_sage_const_2 +(z-z_manifold)**_sage_const_2 )
        u_min, v_min = minimize(distance, (_sage_const_0 ,_sage_const_0 ))
        x_new = (a+b*cos(u_min))*cos(v_min)
        y_new = (a+b*cos(u_min))*sin(v_min)
        z_new = b*sin(u_min)
        self.dimensions["x"] = x_new
        self.dimensions["y"] = y_new
        self.dimensions["z"] = z_new

    def normalize(self):
        if False:
            self.spherical_normalize()
        elif False:
            self.cylindrical_normalize()
        elif True:
            self.manifold_normalize()

    def move(self):
        self.history.append({"x":self.dimensions["x"], "y":self.dimensions["y"], "z":self.dimensions["z"]})
        for field in self.forcefields:
            self.dimensions.update(field.perturb(self.dimensions))
        self.normalize()

class field(object):
    """a field object"""
    def __init__(self):
        self.particles = []
        self.strings = []

    def deform(self):
        pass

    def register_particle(self, particle):
        self.particles.append(particle)

    def register_string(self,string):
        self.strings.append(string)

    def force_at_location(self, dimensions):
        return {"vx":_sage_const_0 , "vy":_sage_const_0 , "vz":_sage_const_0 }

    def perturb(self, dimensions):
        newdimensions = {}
        newdimensions.update(dimensions)
        force_at_location_freeze=self.force_at_location(dimensions)
        for xi, vxi in [("x","vx"), ("y","vy"), ("z", "vz")]:
            if xi in dimensions and vxi in dimensions:
                xi_new = dimensions[xi] + dimensions[vxi]
                newdimensions[xi] = xi_new
                vxi_new = dimensions[vxi]+force_at_location_freeze.get(vxi)
                newdimensions[vxi] = vxi_new
        return newdimensions

    def perturb_string(self, dimensions):
        newdimensions = {}
        newdimensions.update(dimensions)
        force_at_location_freeze=self.force_at_location(dimensions)
        for xi, vxi in [("xi","vxi"), ("yi","vyi"), ("zi", "vzi")]:
            if xi in dimensions and vxi in dimensions:
                xi_new = [N(a+b) for a,b in zip(dimensions[xi], dimensions[vxi])]
                newdimensions[xi] = xi_new
                #print(f"{force_at_location_freeze=}")
                #print(f"{dimensions=}")
                vxi_new = [N(a+b) for a,b in zip(dimensions[vxi], force_at_location_freeze.get(vxi))]
                newdimensions[vxi] = vxi_new
        return newdimensions

class string_brownean_field(field):
    """this field moves the elements of the string"""
    def force_at_location(self, dimensions):
        dt = _sage_const_p01 
        xi = dimensions.get("xi")
        yi = dimensions.get("yi")
        zi = dimensions.get("zi")
        xi_old = dimensions.get("xi_old")
        yi_old = dimensions.get("yi_old")
        zi_old = dimensions.get("yi_old")
        xi_old_taoplus = xi_old[_sage_const_1 :len(xi_old)+_sage_const_1 ]+[xi_old[_sage_const_0 ]]
        yi_old_taoplus = yi_old[_sage_const_1 :len(yi_old)+_sage_const_1 ]+[yi_old[_sage_const_0 ]]
        zi_old_taoplus = zi_old[_sage_const_1 :len(zi_old)+_sage_const_1 ]+[zi_old[_sage_const_0 ]]
        xi_arrow_taoplus = [a-b for a,b in zip(xi, xi_old_taoplus)]
        yi_arrow_taoplus = [a-b for a,b in zip(yi, yi_old_taoplus)]
        zi_arrow_taoplus = [a-b for a,b in zip(zi, zi_old_taoplus)]
        xi_arrow_taominus = [a-b for a,b in zip(xi, xi_old)]
        yi_arrow_taominus = [a-b for a,b in zip(yi, yi_old)]
        zi_arrow_taominus = [a-b for a,b in zip(zi, zi_old)]
        #
        cross_products = [vector((a,b,c)).cross_product(vector((d,e,f))) for a,b,c,d,e,f in zip(xi_arrow_taoplus, yi_arrow_taoplus, zi_arrow_taoplus, xi_arrow_taominus, yi_arrow_taominus, zi_arrow_taominus)]
        #print(f"{cross_products=}")
        return {"vxi":[N(cross_products[i][_sage_const_0 ]*dt) for i in range(_sage_const_0 , len(cross_products))],
                "vyi":[N(cross_products[i][_sage_const_1 ]*dt) for i in range(_sage_const_0 , len(cross_products))],
                "vzi":[N(cross_products[i][_sage_const_2 ]*dt) for i in range(_sage_const_0 , len(cross_products))]}

class linearRotationField(field):
    """linear rotation"""
    def force_at_location(self, dimensions):
        dt = _sage_const_p1 
        return {"vx":-dimensions.get("y")*dt, "vy":dimensions.get("x")*dt, "vz":_sage_const_0 }

class linearRotationFieldWithAttractor(field):
    """linear rotation with attractor"""
    def force_at_location(self, dimensions):
        dt = _sage_const_p1 
        dr = _sage_const_1 /(dimensions.get("x")**_sage_const_2 +dimensions.get("y")**_sage_const_2 )**_sage_const_p5 
        return {"vx":(-dimensions.get("y")-_sage_const_2 *dimensions.get("x"))*dt*dr, "vy":(dimensions.get("x")-_sage_const_2 *dimensions.get("y"))*dt*dr, "vz":_sage_const_0 }

class linearAttractor(field):
    """linear rotation with attractor"""
    def force_at_location(self, dimensions):
        dt = _sage_const_p1 
        dr = _sage_const_1 /(dimensions.get("x")**_sage_const_2 +dimensions.get("y")**_sage_const_2 )**_sage_const_p5 
        return {"vx":(-dimensions.get("x"))*dt*dr, "vy":(-dimensions.get("y"))*dt*dr, "vz":_sage_const_0 }


class browneanField(field):
    """brownean"""
    def force_at_location(self, dimensions):
        dt = _sage_const_p1 
        dx = random.gauss(_sage_const_0 ,_sage_const_1 )
        dy = random.gauss(_sage_const_0 ,_sage_const_1 )
        dz = random.gauss(_sage_const_0 ,_sage_const_1 )
        return {"vx":dx*dt, "vy":dy*dt, "vz":dz*dt}

class browneanSphericalField(field):
    """brownean spherical"""
    def force_at_location(self, dimensions):
        dt = _sage_const_0p1 
        sigma=_sage_const_5 
        dx = random.gauss(_sage_const_0 ,sigma)
        dy = random.gauss(_sage_const_0 ,sigma)
        dz = random.gauss(_sage_const_0 ,sigma)
        x = dimensions.get("x")
        y = dimensions.get("y")
        z = dimensions.get("z")
        vx = dimensions.get("vx")
        vy = dimensions.get("vy")
        vz = dimensions.get("vz")
        xperturb = dx*dt
        yperturb = dy*dt
        zperturb = dz*dt
        #also need to cancel the radius by adding this: r/|r|-r
        rnorm = sqrt(x**_sage_const_2  + y**_sage_const_2  + z**_sage_const_2 )
        print(f"rnorm={rnorm}")
        xnew = _sage_const_50 *xperturb/rnorm
        ynew = _sage_const_50 *yperturb/rnorm
        znew = _sage_const_50 *zperturb/rnorm
        return {"vx":dx-vx, "vy":dy-vy, "vz":dz-vz}

class browneanCylindricalField(field):
    """brownean cylindrical"""
    def force_at_location(self, dimensions):
        dt = _sage_const_0p1 
        sigma=_sage_const_5 
        dx = random.gauss(_sage_const_0 ,sigma)
        dy = random.gauss(_sage_const_0 ,sigma)
        dz = random.gauss(_sage_const_0 ,sigma)
        x = dimensions.get("x")
        y = dimensions.get("y")
        z = dimensions.get("z")
        vx = dimensions.get("vx")
        vy = dimensions.get("vy")
        vz = dimensions.get("vz")
        xperturb = dx*dt
        yperturb = dy*dt
        zperturb = dz*dt
        #also need to cancel the radius by adding this: r/|r|-r
        rnorm = sqrt(x**_sage_const_2  + y**_sage_const_2 )
        print(f"rnorm={rnorm}")
        xnew = _sage_const_50 *xperturb/rnorm
        ynew = _sage_const_50 *yperturb/rnorm
        znew = zperturb
        return {"vx":dx-vx, "vy":dy-vy, "vz":dz-vz}

class browneanManifoldField(field):
    """brownean manifold"""
    def force_at_location(self, dimensions):
        dt = _sage_const_0p1 
        sigma=_sage_const_5 
        dx = random.gauss(_sage_const_0 ,sigma)
        dy = random.gauss(_sage_const_0 ,sigma)
        dz = random.gauss(_sage_const_0 ,sigma)
        x = dimensions.get("x")
        y = dimensions.get("y")
        z = dimensions.get("z")
        vx = dimensions.get("vx")
        vy = dimensions.get("vy")
        vz = dimensions.get("vz")
        xperturb = dx*dt
        yperturb = dy*dt
        zperturb = dz*dt
        #get info from manifold curvature.
        xnew = xperturb
        ynew = yperturb
        znew = zperturb
        return {"vx":dx-vx, "vy":dy-vy, "vz":dz-vz}

class flatField(field):
    """flat field"""
    pass

class forceFieldFactory(object):
    """Creates a field"""
    def __init__(self, **kwargs):
        self.forcefield_type = kwargs.get("forcefield_type")

    def newField(self):
        if self.forcefield_type == linear_rotation:
            return linearRotationField()
        elif self.forcefield_type == linear_rotation_with_attractor:
            return linearRotationFieldWithAttractor()
        elif self.forcefield_type == brownean:
            return browneanField()
        elif self.forcefield_type == browneanSpherical:
            return browneanSphericalField()
        elif self.forcefield_type == browneanCylindrical:
            return browneanCylindricalField()
        elif self.forcefield_type == browneanManifold:
            return browneanManifoldField()
        elif self.forcefield_type == string_brownean_field:
            return string_brownean_field()
        else:
            return flatField()

class particleFactory(object):
    def __init__(self, **kwargs):
        self.forcefields = kwargs.get("forcefields")
        self.timeout = kwargs.get("timeout")
        self.color = kwargs.get("color", "blue")
        self.radius = kwargs.get("radius", _sage_const_50 )
        self.forcefield_type_list = kwargs.get("forcefield_type_list")
        self.circumference_elements = kwargs.get("circumference_elements", _sage_const_1 )

    def newParticle(self):
        dimensions = {"x":random.random()*_sage_const_100 -_sage_const_50 , "y":random.random()*_sage_const_100 -_sage_const_50 , "z":random.random()*_sage_const_100 -_sage_const_50 , "vx":_sage_const_0 , "vy":_sage_const_0 , "vz":_sage_const_0 , "m":_sage_const_1 , "r":self.radius}    
        mote = particle(dimensions=dimensions, forcefields=self.forcefields, color=self.color)
        return mote

    def newString(self):
        number_elements = self.circumference_elements
        radius = _sage_const_50 
        dimensions = {"xi":[radius*cos(_sage_const_2  * pi * i / number_elements) for i in range(_sage_const_0 , number_elements)], 
                      "yi":[radius*sin(_sage_const_2  * pi * i / number_elements) for i in range(_sage_const_0 , number_elements)], 
                      "zi":[_sage_const_0  for i in range(_sage_const_0 , number_elements)], 
                      "vxi":[_sage_const_0  for i in range(_sage_const_0 , number_elements)], 
                      "vyi":[_sage_const_0  for i in range(_sage_const_0 , number_elements)], 
                      "vzi":[_sage_const_0  for i in range(_sage_const_0 , number_elements)], 
                      "mi":[_sage_const_1  for i in range(_sage_const_0 , number_elements)], 
                      "ri":[_sage_const_1  for i in range(_sage_const_0 , number_elements)]}
        loop = string(dimensions=dimensions, forcefields=self.forcefields, color=self.color)
        return loop

class particle_systems(object):
    """Shows Particle Systems"""
    particle_list = []
    string_list = []
    field_list = []

    def visualize_frame_string(self):
        """Visualize a string"""
        frame = Graphics()
        frame3d = sage.plot.plot3d.base.Graphics3d()
        frame.axes(False)
        #frame3dtrail = sage.plot.plot3d.base.Graphics3d()
        for string in self.string_list:
            xi = string.dimensions.get("xi")
            yi = string.dimensions.get("yi")
            zi = string.dimensions.get("zi")
            color=string.color
            size = string.dimensions.get("m")
            path = [(a,b,c) for a,b,c in zip(xi,yi,zi)]
            #path.append(path[0])
            path = path
            print(f"{path=}")
            lin = line3d(path, thickness=_sage_const_1 , color='blue')
            #lin.axes(False)
            frame += lin
        return frame


    def visualize_frame(self):
        """Visualize a particle system"""
        frame = Graphics()
        frame3d = sage.plot.plot3d.base.Graphics3d()
        frame.axes(False)
        frame3dtrail = sage.plot.plot3d.base.Graphics3d()
        for particle in self.particle_list:
            x = particle.dimensions.get("x")
            y = particle.dimensions.get("y")
            z = particle.dimensions.get("z", _sage_const_0 )
            color=particle.color
            size = particle.dimensions.get("m")
            d = disk((x,y), size, (_sage_const_0 , _sage_const_2 *pi), color=color)
            d.axes(False)
            frame += d
            sphere3d = sage.plot.plot3d.shapes2.sphere(center=(x,y,z), size=size, color=color, aspect_ratio=[_sage_const_1 ,_sage_const_1 ,_sage_const_1 ])
            frame3d += sphere3d
            print(f"particle.history = {particle.history}")
            eventlist = [(event.get("x"), event.get("y"), event.get("z")) for event in particle.history][_sage_const_1 :]
            print(f"len(eventlist) = {len(eventlist)}")
            if len(eventlist) > _sage_const_1 :
                zipped_eventlist = [eventpair for eventpair in zip(eventlist, [(_sage_const_0 ,_sage_const_0 ,_sage_const_0 )]+eventlist)][_sage_const_1 :]
                # print(eventlist)
                b = line3d(eventlist, thickness=_sage_const_1 , opacity=_sage_const_1 , aspect_ratio=_sage_const_1 , color=color)
                frame3dtrail+=b
                # print(b)
                # b = line(eventlist)
        frame.axes(False)
        return frame,frame3d,frame3dtrail

    def dataframe_from_particle_history(self):
        """Create a dataframe of the particle histories."""
        pass
        #for particle in self.particle_list:
        #    x = particle.dimensions.get("x") 
        #    y = particle.dimensions.get("y")
        #    z = particle.dimensions.get("z")
        #df = pd.DataFrame(x=x, y=y, z=z)
        #self.df = df

    def __init__(self, field_config_dict, particle_config_list=[], string_config_list=[]):
        """Initializes an object"""
        for profile in field_config_dict:
            forcefield_type = field_config_dict.get(profile).get("forcefield_type", linear_rotation)
            force_field_factory = forceFieldFactory(forcefield_type=forcefield_type)
            forcefield = force_field_factory.newField()
            field_config_dict[profile]["forcefield"] = forcefield

        for profile in particle_config_list:
            forcefield_type_list = profile.get("forcefield_type_list")
            timeout = profile.get("timeout", _sage_const_1 )
            number_particles = profile.get("number_particles", _sage_const_100 )
            color = profile.get("color", "blue")
            radius = profile.get("radius",_sage_const_50 )
            print(f"forcefield_type_list={forcefield_type_list}")
            forcefields = [field_config_dict.get(forcefield_type).get("forcefield") for forcefield_type in forcefield_type_list]
            particle_factory = particleFactory(forcefields=forcefields, timeout=timeout, color=color, radius=radius, forcefield_type_list=forcefield_type_list)
            for i in range(_sage_const_0 , number_particles):
                particle = particle_factory.newParticle()
                self.particle_list.append(particle)
        print(f"{string_config_list=}")
        for profile in string_config_list:
            forcefield_type_list = profile.get("forcefield_type_list")
            timeout = profile.get("timeout", _sage_const_1 )
            number_strings = profile.get("number_strings", _sage_const_1 )
            color = profile.get("color", "blue")
            radius = profile.get("radius",_sage_const_50 )
            circumference_elements=profile.get("circumference_elements",_sage_const_1 )
            print(f"{forcefield_type_list=}")
            print(f"{field_config_dict=}")
            print(f"{forcefield_type=}")
            forcefields = [field_config_dict.get(forcefield_type).get("forcefield") for forcefield_type in forcefield_type_list]
            particle_factory = particleFactory(forcefields=forcefields, 
                timeout=timeout, 
                color=color, 
                radius=radius, 
                forcefield_type_list=forcefield_type_list,
                circumference_elements=circumference_elements)
            for i in range(_sage_const_0 , number_strings):
                string = particle_factory.newString()
                self.string_list.append(string)

    def act(self):
        for particle in self.particle_list:
            particle.move()
        for string in self.string_list:
            string.move()
        for field in self.field_list:
            field.deform()

def string_movie():
    plotname = "string_brownean"
    forcefield_config = {string_brownean_field : {"forcefield_type":string_brownean_field}}
    if plotname == "string_brownean":
        string_config_list = [{"forcefield_type_list":[string_brownean_field], "timeout":_sage_const_1 , "number_strings":_sage_const_1 , "color":"blue", "circumference_elements":_sage_const_100 }]
    ps = particle_systems(field_config_dict=forcefield_config, string_config_list=string_config_list)
    timesteps = _sage_const_100 
    frames = []
    frames3d = []
    frames_3dtrail=[]
    for i in range(_sage_const_0 ,timesteps):
        print(f"String movie timestep {i}/{timesteps}")
        ps.act()
        if i>_sage_const_1 :
            frame3d = ps.visualize_frame_string()
            frame3d.save(f"results/{plotname}/frame3d_{i}.png".format(i=i), xmin=-_sage_const_100 , xmax=_sage_const_100 , ymin=-_sage_const_100 , ymax=_sage_const_100 , zmin=-_sage_const_100 , zmax=_sage_const_100 , labels=False)
            frames3d.append(frame3d)
            #frame_3dtrail.save(f"results/{plotname}/frame3dtrail_{i}.png".format(i=i), frame=False, xmin=-100, xmax=100, ymin=-100, ymax=100, zmin=-100, zmax=100)
            #frames_3dtrail.append(frame_3dtrail)
    print("animating frames3d...")
    animate(frames3d, xmin=-_sage_const_100 , xmax=_sage_const_100 , ymin=-_sage_const_100 , ymax=_sage_const_100 , zmin=-_sage_const_100 , zmax=_sage_const_100 , axes=False, frame=False).save(f'results/{plotname}/plots3d.gif')
    #print("animating frames_3dtrail...")
    #animate(frames_3dtrail, xmin=-100, xmax=100, ymin=-100, ymax=100, zmin=-100, zmax=100, axes=False, frame=False).save(f'results/{plotname}/plots3dtrail.gif')
    #ps.visualize_movie(frames)

def particle_movie():
    #plotname="test_3nsov2023"
    #plotname="brownean"
    plotname="browneanSpherical"
    #plotname="jake"
    #plotname="cylindrical_test"
    #plotname="manifold_test"
    forcefield_config = {linear_rotation : {"forcefield_type" : linear_rotation}, 
        linear_attractor : {"forcefield_type" : linear_attractor}, 
        linear_rotation_with_attractor : {"forcefield_type" : linear_rotation_with_attractor}, 
        brownean : {"forcefield_type" : brownean}, 
        browneanSpherical : {"forcefield_type" : browneanSpherical},
        browneanCylindrical : {"forcefield_type" : browneanCylindrical},
        browneanManifold : {"forcefield_type" : browneanManifold}}
    if plotname == "test_3nov2023":
        particle_config = [{"forcefield_type_list":[linear_rotation], "timeout":_sage_const_1 , "number_particles":_sage_const_100 , "color":"blue"}, 
                           {"forcefield_type_list":[linear_rotation_with_attractor], "timeout":_sage_const_1 , "number_particles":_sage_const_100 , "color":"blue"}, 
                           {"forcefield_type_list":[linear_attractor], "timeout":_sage_const_1 , "number_particles":_sage_const_100 , "color":"blue"}]
    elif plotname == "brownean":
        particle_config = [{"forcefield_type_list":[brownean], "timeout":_sage_const_1 , "number_particles":_sage_const_100 , "color":"green"}]
    elif plotname == "browneanSpherical":
        particle_config = [
        {"forcefield_type_list":[browneanSpherical], "timeout":_sage_const_1 , "number_particles":_sage_const_25 , "color":"black", "radius":_sage_const_50 },
        #{"forcefield_type_list":[browneanSpherical], "timeout":1, "number_particles":10, "color":"brown", "radius":52},
        #{"forcefield_type_list":[browneanSpherical], "timeout":1, "number_particles":20, "color":"green", "radius":51},
        {"forcefield_type_list":[browneanSpherical], "timeout":_sage_const_1 , "number_particles":_sage_const_5 , "color":"green", "radius":_sage_const_57 }
        ]
    elif plotname == "jake":
        particle_config = [
        {"forcefield_type_list":[browneanSpherical], "timeout":_sage_const_1 , "number_particles":_sage_const_250 , "color":"pink", "radius":_sage_const_100 }
        ]
    elif plotname == "cylindrical_test":
        particle_config = [{"forcefield_type_list":[browneanCylindrical], "timeout":_sage_const_1 , "number_particles":_sage_const_20 , "color":"blue", "radius":_sage_const_50 },
                           {"forcefield_type_list":[browneanCylindrical], "timeout":_sage_const_1 , "number_particles":_sage_const_20 , "color":"yellow", "radius":_sage_const_30 }]
    elif plotname == "manifold_test":
        particle_config = [{"forcefield_type_list":[browneanManifold], "timeout":_sage_const_1 , "number_particles":_sage_const_20 , "color":"blue"}]
    ps = particle_systems(forcefield_config, particle_config_list=particle_config)
    timesteps = _sage_const_100 
    frames = []
    frames3d = []
    frames_3dtrail=[]
    for i in range(_sage_const_0 ,timesteps):
        print(f"Timestep {i}/{timesteps}")
        ps.act()
        if i>_sage_const_1 :
            frame,frame3d,frame_3dtrail = ps.visualize_frame()
            frame.save(f"results/{plotname}/frame_{i}.png".format(i=i), xmin=-_sage_const_100 , xmax=_sage_const_100 , ymin=-_sage_const_100 , ymax=_sage_const_100 )
            frames.append(frame)
            frame3d.save(f"results/{plotname}/frame3d_{i}.png".format(i=i), xmin=-_sage_const_100 , xmax=_sage_const_100 , ymin=-_sage_const_100 , ymax=_sage_const_100 , zmin=-_sage_const_100 , zmax=_sage_const_100 )
            frames3d.append(frame3d)
            frame_3dtrail.save(f"results/{plotname}/frame3dtrail_{i}.png".format(i=i), frame=False, xmin=-_sage_const_100 , xmax=_sage_const_100 , ymin=-_sage_const_100 , ymax=_sage_const_100 , zmin=-_sage_const_100 , zmax=_sage_const_100 )
            frames_3dtrail.append(frame_3dtrail)
    print("animating frames...")
    animate(frames,xmin=-_sage_const_100 ,xmax=_sage_const_100 ,ymin=-_sage_const_100 , ymax=_sage_const_100 , axes=False).save(f'results/{plotname}/plots.gif')
    print("animating frames3d...")
    animate(frames3d, xmin=-_sage_const_100 , xmax=_sage_const_100 , ymin=-_sage_const_100 , ymax=_sage_const_100 , zmin=-_sage_const_100 , zmax=_sage_const_100 , axes=False, frame=False).save(f'results/{plotname}/plots3d.gif')
    print("animating frames_3dtrail...")
    animate(frames_3dtrail, xmin=-_sage_const_100 , xmax=_sage_const_100 , ymin=-_sage_const_100 , ymax=_sage_const_100 , zmin=-_sage_const_100 , zmax=_sage_const_100 , axes=False, frame=False).save(f'results/{plotname}/plots3dtrail.gif')
    #ps.visualize_movie(frames)

def main():
    #particle_movie()
    string_movie()

if __name__ == "__main__":
    main()

